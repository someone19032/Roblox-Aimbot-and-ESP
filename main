-- Fancy Aimbot/ESP UI Script
local Player = game:GetService("Players").LocalPlayer
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

-- Create main ScreenGui
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "AimbotESPUI"
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
ScreenGui.Parent = Player:WaitForChild("PlayerGui")

-- Main Frame
local MainFrame = Instance.new("Frame")
MainFrame.Name = "MainFrame"
MainFrame.Size = UDim2.new(0, 350, 0, 500)
MainFrame.Position = UDim2.new(0.5, -175, 0.5, -250)
MainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 40)
MainFrame.Active = true
MainFrame.Draggable = true
MainFrame.Parent = ScreenGui

-- UI Corner for Main Frame
local UICorner = Instance.new("UICorner")
UICorner.CornerRadius = UDim.new(0, 8)
UICorner.Parent = MainFrame

-- Title Bar
local TitleBar = Instance.new("Frame")
TitleBar.Name = "TitleBar"
TitleBar.Size = UDim2.new(1, 0, 0, 30)
TitleBar.BackgroundColor3 = Color3.fromRGB(20, 20, 30)
TitleBar.Parent = MainFrame

-- UI Corner for Title Bar (top corners only)
local TitleBarCorner = Instance.new("UICorner")
TitleBarCorner.CornerRadius = UDim.new(0, 8)
TitleBarCorner.Parent = TitleBar

-- Title Text
local TitleText = Instance.new("TextLabel")
TitleText.Name = "TitleText"
TitleText.Size = UDim2.new(1, -40, 1, 0)
TitleText.Position = UDim2.new(0, 10, 0, 0)
TitleText.BackgroundTransparency = 1
TitleText.Text = "Aimbot & ESP Settings"
TitleText.TextColor3 = Color3.fromRGB(255, 255, 255)
TitleText.TextXAlignment = Enum.TextXAlignment.Left
TitleText.Font = Enum.Font.GothamBold
TitleText.TextSize = 14
TitleText.Parent = TitleBar

-- Close Button
local CloseButton = Instance.new("TextButton")
CloseButton.Name = "CloseButton"
CloseButton.Size = UDim2.new(0, 30, 1, 0)
CloseButton.Position = UDim2.new(1, -30, 0, 0)
CloseButton.BackgroundTransparency = 1
CloseButton.Text = "X"
CloseButton.TextColor3 = Color3.fromRGB(255, 255, 255)
CloseButton.Font = Enum.Font.GothamBold
CloseButton.TextSize = 14
CloseButton.Parent = TitleBar

CloseButton.MouseButton1Click:Connect(function()
    ScreenGui:Destroy()
end)

-- Scrolling Frame
local ScrollFrame = Instance.new("ScrollingFrame")
ScrollFrame.Name = "ScrollFrame"
ScrollFrame.Size = UDim2.new(1, -10, 1, -40)
ScrollFrame.Position = UDim2.new(0, 5, 0, 35)
ScrollFrame.BackgroundTransparency = 1
ScrollFrame.ScrollBarThickness = 5
ScrollFrame.CanvasSize = UDim2.new(0, 0, 0, 1000) -- Will be adjusted
ScrollFrame.Parent = MainFrame

-- UI List Layout
local UIListLayout = Instance.new("UIListLayout")
UIListLayout.Padding = UDim.new(0, 5)
UIListLayout.Parent = ScrollFrame

-- Function to create sections
local function createSection(title)
    local sectionFrame = Instance.new("Frame")
    sectionFrame.Name = title .. "Section"
    sectionFrame.Size = UDim2.new(1, 0, 0, 30)
    sectionFrame.BackgroundTransparency = 1
    sectionFrame.Parent = ScrollFrame
    
    local sectionLabel = Instance.new("TextLabel")
    sectionLabel.Name = "Label"
    sectionLabel.Size = UDim2.new(1, -10, 1, 0)
    sectionLabel.Position = UDim2.new(0, 10, 0, 0)
    sectionLabel.BackgroundTransparency = 1
    sectionLabel.Text = title
    sectionLabel.TextColor3 = Color3.fromRGB(200, 200, 255)
    sectionLabel.TextXAlignment = Enum.TextXAlignment.Left
    sectionLabel.Font = Enum.Font.GothamBold
    sectionLabel.TextSize = 14
    sectionLabel.Parent = sectionFrame
    
    local sectionDivider = Instance.new("Frame")
    sectionDivider.Name = "Divider"
    sectionDivider.Size = UDim2.new(1, -10, 0, 1)
    sectionDivider.Position = UDim2.new(0, 5, 1, -5)
    sectionDivider.BackgroundColor3 = Color3.fromRGB(60, 60, 80)
    sectionDivider.BorderSizePixel = 0
    sectionDivider.Parent = sectionFrame
    
    return sectionFrame
end

-- Function to create toggle option
local function createToggleOption(parent, name, default)
    local toggleFrame = Instance.new("Frame")
    toggleFrame.Name = name .. "Toggle"
    toggleFrame.Size = UDim2.new(1, -10, 0, 25)
    toggleFrame.BackgroundTransparency = 1
    toggleFrame.Parent = parent
    
    local toggleLabel = Instance.new("TextLabel")
    toggleLabel.Name = "Label"
    toggleLabel.Size = UDim2.new(0.7, 0, 1, 0)
    toggleLabel.BackgroundTransparency = 1
    toggleLabel.Text = name
    toggleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    toggleLabel.TextXAlignment = Enum.TextXAlignment.Left
    toggleLabel.Font = Enum.Font.Gotham
    toggleLabel.TextSize = 12
    toggleLabel.Parent = toggleFrame
    
    local toggleButton = Instance.new("TextButton")
    toggleButton.Name = "ToggleButton"
    toggleButton.Size = UDim2.new(0.3, 0, 0.8, 0)
    toggleButton.Position = UDim2.new(0.7, 0, 0.1, 0)
    toggleButton.BackgroundColor3 = default and Color3.fromRGB(0, 170, 0) or Color3.fromRGB(170, 0, 0)
    toggleButton.Text = default and "ON" or "OFF"
    toggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    toggleButton.Font = Enum.Font.GothamBold
    toggleButton.TextSize = 12
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 12)
    corner.Parent = toggleButton
    
    toggleButton.Parent = toggleFrame
    
    toggleButton.MouseButton1Click:Connect(function()
        local newValue = not (toggleButton.Text == "ON")
        toggleButton.BackgroundColor3 = newValue and Color3.fromRGB(0, 170, 0) or Color3.fromRGB(170, 0, 0)
        toggleButton.Text = newValue and "ON" or "OFF"
        -- Here you would connect to your actual functionality
        print(name, "set to", newValue)
    end)
    
    return toggleFrame
end

-- Function to create slider option
local function createSliderOption(parent, name, min, max, default, decimal)
    local sliderFrame = Instance.new("Frame")
    sliderFrame.Name = name .. "Slider"
    sliderFrame.Size = UDim2.new(1, -10, 0, 50)
    sliderFrame.BackgroundTransparency = 1
    sliderFrame.Parent = parent
    
    local sliderLabel = Instance.new("TextLabel")
    sliderLabel.Name = "Label"
    sliderLabel.Size = UDim2.new(1, 0, 0, 15)
    sliderLabel.BackgroundTransparency = 1
    sliderLabel.Text = name .. ": " .. default
    sliderLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    sliderLabel.TextXAlignment = Enum.TextXAlignment.Left
    sliderLabel.Font = Enum.Font.Gotham
    sliderLabel.TextSize = 12
    sliderLabel.Parent = sliderFrame
    
    local sliderBackground = Instance.new("Frame")
    sliderBackground.Name = "Background"
    sliderBackground.Size = UDim2.new(1, 0, 0, 10)
    sliderBackground.Position = UDim2.new(0, 0, 0, 20)
    sliderBackground.BackgroundColor3 = Color3.fromRGB(60, 60, 80)
    sliderBackground.BorderSizePixel = 0
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 5)
    corner.Parent = sliderBackground
    
    sliderBackground.Parent = sliderFrame
    
    local sliderFill = Instance.new("Frame")
    sliderFill.Name = "Fill"
    sliderFill.Size = UDim2.new((default - min) / (max - min), 0, 1, 0)
    sliderFill.BackgroundColor3 = Color3.fromRGB(0, 170, 255)
    sliderFill.BorderSizePixel = 0
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 5)
    corner.Parent = sliderFill
    
    sliderFill.Parent = sliderBackground
    
    local sliderButton = Instance.new("TextButton")
    sliderButton.Name = "SliderButton"
    sliderButton.Size = UDim2.new(0, 20, 0, 20)
    sliderButton.Position = UDim2.new(sliderFill.Size.X.Scale, -10, 0.5, -10)
    sliderButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    sliderButton.Text = ""
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 10)
    corner.Parent = sliderButton
    
    sliderButton.Parent = sliderBackground
    
    local dragging = false
    
    local function updateSlider(input)
        local pos = UDim2.new(
            math.clamp((input.Position.X - sliderBackground.AbsolutePosition.X) / sliderBackground.AbsoluteSize.X, 0, 1),
            0,
            0.5,
            -10
        )
        sliderButton.Position = pos
        sliderFill.Size = UDim2.new(pos.X.Scale, 0, 1, 0)
        
        local value = min + (max - min) * pos.X.Scale
        if not decimal then value = math.floor(value) end
        value = math.floor(value * 100) / 100
        
        sliderLabel.Text = name .. ": " .. value
        -- Here you would connect to your actual functionality
        print(name, "set to", value)
    end
    
    sliderButton.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
        end
    end)
    
    sliderButton.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            updateSlider(input)
        end
    end)
    
    return sliderFrame
end

-- Function to create dropdown option
local function createDropdownOption(parent, name, options, default)
    local dropdownFrame = Instance.new("Frame")
    dropdownFrame.Name = name .. "Dropdown"
    dropdownFrame.Size = UDim2.new(1, -10, 0, 25)
    dropdownFrame.BackgroundTransparency = 1
    dropdownFrame.Parent = parent
    
    local dropdownLabel = Instance.new("TextLabel")
    dropdownLabel.Name = "Label"
    dropdownLabel.Size = UDim2.new(0.5, 0, 1, 0)
    dropdownLabel.BackgroundTransparency = 1
    dropdownLabel.Text = name
    dropdownLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    dropdownLabel.TextXAlignment = Enum.TextXAlignment.Left
    dropdownLabel.Font = Enum.Font.Gotham
    dropdownLabel.TextSize = 12
    dropdownLabel.Parent = dropdownFrame
    
    local dropdownButton = Instance.new("TextButton")
    dropdownButton.Name = "DropdownButton"
    dropdownButton.Size = UDim2.new(0.5, 0, 1, 0)
    dropdownButton.Position = UDim2.new(0.5, 0, 0, 0)
    dropdownButton.BackgroundColor3 = Color3.fromRGB(60, 60, 80)
    dropdownButton.Text = options[default] or options[1]
    dropdownButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    dropdownButton.Font = Enum.Font.Gotham
    dropdownButton.TextSize = 12
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 5)
    corner.Parent = dropdownButton
    
    dropdownButton.Parent = dropdownFrame
    
    local dropdownMenu = Instance.new("Frame")
    dropdownMenu.Name = "DropdownMenu"
    dropdownMenu.Size = UDim2.new(0.5, 0, 0, #options * 25)
    dropdownMenu.Position = UDim2.new(0.5, 0, 1, 5)
    dropdownMenu.BackgroundColor3 = Color3.fromRGB(40, 40, 50)
    dropdownMenu.Visible = false
    dropdownMenu.ZIndex = 10
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 5)
    corner.Parent = dropdownMenu
    
    local layout = Instance.new("UIListLayout")
    layout.Parent = dropdownMenu
    
    for i, option in ipairs(options) do
        local optionButton = Instance.new("TextButton")
        optionButton.Name = option .. "Option"
        optionButton.Size = UDim2.new(1, 0, 0, 25)
        optionButton.BackgroundColor3 = Color3.fromRGB(60, 60, 80)
        optionButton.Text = option
        optionButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        optionButton.Font = Enum.Font.Gotham
        optionButton.TextSize = 12
        optionButton.ZIndex = 11
        
        optionButton.MouseButton1Click:Connect(function()
            dropdownButton.Text = option
            dropdownMenu.Visible = false
            -- Here you would connect to your actual functionality
            print(name, "set to", option)
        end)
        
        optionButton.Parent = dropdownMenu
    end
    
    dropdownMenu.Parent = dropdownFrame
    
    dropdownButton.MouseButton1Click:Connect(function()
        dropdownMenu.Visible = not dropdownMenu.Visible
    end)
    
    return dropdownFrame
end

-- Function to create color picker option
local function createColorPickerOption(parent, name, defaultColor)
    local colorFrame = Instance.new("Frame")
    colorFrame.Name = name .. "ColorPicker"
    colorFrame.Size = UDim2.new(1, -10, 0, 25)
    colorFrame.BackgroundTransparency = 1
    colorFrame.Parent = parent
    
    local colorLabel = Instance.new("TextLabel")
    colorLabel.Name = "Label"
    colorLabel.Size = UDim2.new(0.7, 0, 1, 0)
    colorLabel.BackgroundTransparency = 1
    colorLabel.Text = name
    colorLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    colorLabel.TextXAlignment = Enum.TextXAlignment.Left
    colorLabel.Font = Enum.Font.Gotham
    colorLabel.TextSize = 12
    colorLabel.Parent = colorFrame
    
    local colorButton = Instance.new("TextButton")
    colorButton.Name = "ColorButton"
    colorButton.Size = UDim2.new(0.3, 0, 0.8, 0)
    colorButton.Position = UDim2.new(0.7, 0, 0.1, 0)
    colorButton.BackgroundColor3 = defaultColor
    colorButton.Text = ""
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 5)
    corner.Parent = colorButton
    
    colorButton.Parent = colorFrame
    
    colorButton.MouseButton1Click:Connect(function()
        -- In a real implementation, you would open a color picker dialog here
        -- For this example, we'll just cycle through some colors
        local colors = {
            Color3.fromRGB(255, 0, 0),
            Color3.fromRGB(0, 255, 0),
            Color3.fromRGB(0, 0, 255),
            Color3.fromRGB(255, 255, 0),
            Color3.fromRGB(0, 255, 255),
            Color3.fromRGB(255, 0, 255),
        }
        
        local currentIndex = 1
        for i, color in ipairs(colors) do
            if color == colorButton.BackgroundColor3 then
                currentIndex = i + 1
                if currentIndex > #colors then currentIndex = 1 end
                break
            end
        end
        
        colorButton.BackgroundColor3 = colors[currentIndex]
        -- Here you would connect to your actual functionality
        print(name, "color set to", colorButton.BackgroundColor3)
    end)
    
    return colorFrame
end

-- Create all sections and options

-- Aimbot Section
local aimbotSection = createSection("Aimbot")
createToggleOption(aimbotSection, "Enable Aimbot", false)
createToggleOption(aimbotSection, "Silent Aim", false)
createToggleOption(aimbotSection, "Visibility Check", true)
createToggleOption(aimbotSection, "Team Check", true)
createSliderOption(aimbotSection, "Aimbot FOV", 1, 360, 30, false)
createSliderOption(aimbotSection, "Smoothness", 1, 100, 20, false)
createDropdownOption(aimbotSection, "Aimbot Bone", {"Head", "Torso", "Random"}, 1)
createToggleOption(aimbotSection, "Prediction", false)
createSliderOption(aimbotSection, "Prediction Scale", 1, 200, 100, true)

-- ESP Section
local espSection = createSection("ESP")
createToggleOption(espSection, "Enable ESP", false)
createToggleOption(espSection, "Box ESP", true)
createToggleOption(espSection, "Name ESP", true)
createToggleOption(espSection, "Health Bar", true)
createToggleOption(espSection, "Distance", true)
createToggleOption(espSection, "Tracers", false)
createColorPickerOption(espSection, "Enemy Color", Color3.fromRGB(255, 0, 0))
createColorPickerOption(espSection, "Team Color", Color3.fromRGB(0, 255, 0))
createSliderOption(espSection, "Max Distance", 10, 1000, 500, false)

-- Visuals Section
local visualsSection = createSection("Visuals")
createToggleOption(visualsSection, "No Recoil", false)
createToggleOption(visualsSection, "No Spread", false)
createToggleOption(visualsSection, "No Flash", false)
createToggleOption(visualsSection, "Fullbright", false)
createSliderOption(visualsSection, "Field of View", 70, 120, 80, false)

-- Misc Section
local miscSection = createSection("Miscellaneous")
createToggleOption(miscSection, "Bunny Hop", false)
createToggleOption(miscSection, "Auto Reload", false)
createToggleOption(miscSection, "Trigger Bot", false)
createSliderOption(miscSection, "Trigger Delay", 0, 500, 50, false)
createDropdownOption(miscSection, "Crosshair Style", {"Default", "Dot", "Circle", "Cross"}, 1)
createColorPickerOption(miscSection, "Crosshair Color", Color3.fromRGB(255, 255, 255))

-- Update canvas size when layout changes
UIListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
    ScrollFrame.CanvasSize = UDim2.new(0, 0, 0, UIListLayout.AbsoluteContentSize.Y + 10)
end)

-- Make window draggable
local dragging
local dragInput
local dragStart
local startPos

local function update(input)
    local delta = input.Position - dragStart
    MainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
end

TitleBar.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = true
        dragStart = input.Position
        startPos = MainFrame.Position
        
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

TitleBar.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement then
        dragInput = input
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if input == dragInput and dragging then
        update(input)
    end
end)
